import asyncio
import random
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from config import BOT_TOKEN
import database

GROUPS = [
    "–ò–°–∏–ü25-1", "–ò–°–∏–ü25–∫", "–ú–ö23", "–ú–ù–≠25",
    "–û–ò–ë25-1", "–û–ò–ë25-2", "–û–ò–ë25–∫", "–¢–≠–°25", "–¢–≠–°24",
    "–£–ö25-1", "–£–ö25-2", "–£–ö25–∫",
    "–≠–ú23", "–≠–ú25", "–≠–°25-1", "–≠–°25-2", "–≠–°24"
]

SUPER_ADMIN_ID = 5720640497
ADMIN_PASSWORD = "–∞–¥–º–∏–Ω123"

class Registration(StatesGroup):
    waiting_for_group = State()
    waiting_for_fio = State()

class AdminRegistration(StatesGroup):
    waiting_for_role_choice = State()
    waiting_for_fio = State()
    waiting_for_group = State()
    waiting_for_confirmation = State()

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

def get_groups_keyboard(with_back=True):
    buttons = []
    row = []
    for i, group in enumerate(GROUPS):
        row.append(KeyboardButton(text=group))
        if len(row) == 2:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    
    if with_back:
        buttons.append([KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")])
    
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_role_choice_keyboard():
    keyboard = [
        [KeyboardButton(text="üë®‚Äçüè´ –£—á–∏—Ç–µ–ª—å")],
        [KeyboardButton(text="üë§ –£—á–µ–Ω–∏–∫-–∞–¥–º–∏–Ω")],
        [KeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_profile_keyboard():
    keyboard = [[KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")]]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

async def get_user_photo_url(user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç URL —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        photos = await bot.get_user_profile_photos(user_id, limit=1)
        if photos.total_count > 0:
            photo = photos.photos[0][-1]  # –ë–µ—Ä—ë–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
            file = await bot.get_file(photo.file_id)
            photo_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"
            return photo_url
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
    return None

@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    telegram_id = message.from_user.id
    telegram_username = message.from_user.username
    telegram_name = message.from_user.full_name
    
    photo_url = await get_user_photo_url(telegram_id)
    has_premium = message.from_user.is_premium or False
    
    user = database.get_user_by_telegram(telegram_id)
    
    if user:
        database.update_user_profile(
            telegram_id=telegram_id,
            telegram_username=telegram_username,
            telegram_name=telegram_name,
            photo_url=photo_url,
            has_premium=has_premium
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        greeting = f"üëã –ü—Ä–∏–≤–µ—Ç, {user['first_name']}!\n\n"
        greeting += f"–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n"
        
        if user.get('role') == 'teacher':
            greeting += f"–†–æ–ª—å: –£—á–∏—Ç–µ–ª—å\n"
        elif user.get('is_admin'):
            greeting += f"–†–æ–ª—å: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
            greeting += f"–ì—Ä—É–ø–ø–∞: {user['group_name']}\n"
        else:
            greeting += f"–ì—Ä—É–ø–ø–∞: {user['group_name']}\n"
        
        greeting += f"–§–ò–û: {user['last_name']} {user['first_name']} {user['middle_name'] or ''}\n\n"
        greeting += f"–î–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ:\n"
        
        if user.get('role') == 'teacher':
            greeting += f"üëâ https://pashq.ru/rub"
        else:
            greeting += f"üëâ https://pashq.ru/login"
        
        await message.answer(
            greeting,
            reply_markup=get_profile_keyboard()
        )
    else:
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ—Ñ–∏–ª–µ–π –ù–ü–≠–ö!\n\n"
            "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
            reply_markup=get_groups_keyboard()
        )
        await state.set_state(Registration.waiting_for_group)


@dp.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "üìñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\n"
        "/start - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è\n"
        "/help - –ü–æ–º–æ—â—å\n\n"
        "–î–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –∏ –∏–º–µ–Ω–∏."
    )

# –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∞ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ü–ï–†–ï–î –≤—Å–µ–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏!
@dp.message(F.text == ADMIN_PASSWORD)
async def admin_password_entered(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞—Ä–æ–ª—è '–∞–¥–º–∏–Ω123' –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–æ–≤ - —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏"""
    telegram_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    existing_user = database.get_user_by_telegram(telegram_id)
    if existing_user:
        await message.answer(
            "‚ùå –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è.",
            reply_markup=get_profile_keyboard()
        )
        return
    
    # –û—á–∏—â–∞–µ–º –ª—é–±–æ–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    await message.answer(
        "üîë –ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç!\n\n"
        "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞:",
        reply_markup=get_role_choice_keyboard()
    )
    await state.set_state(AdminRegistration.waiting_for_role_choice)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –æ–±—ã—á–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.message(Registration.waiting_for_group)
async def process_group(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∞ –í–ù–£–¢–†–ò –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if message.text == ADMIN_PASSWORD:
        await admin_password_entered(message, state)
        return
    
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer(
            "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=ReplyKeyboardRemove()
        )
        return
    
    if message.text not in GROUPS:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:",
            reply_markup=get_groups_keyboard()
        )
        return
    
    await state.update_data(group=message.text)
    back_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )
    await message.answer(
        "‚úÖ –ì—Ä—É–ø–ø–∞ –≤—ã–±—Ä–∞–Ω–∞!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ—ë –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ) —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n\n"
        "–ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç—á–µ—Å—Ç–≤–∞, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è.",
        reply_markup=back_keyboard
    )
    await state.set_state(Registration.waiting_for_fio)

@dp.message(Registration.waiting_for_fio)
async def process_fio(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∞ –í–ù–£–¢–†–ò –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if message.text == ADMIN_PASSWORD:
        await admin_password_entered(message, state)
        return
    
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await message.answer(
            "–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
            reply_markup=get_groups_keyboard()
        )
        await state.set_state(Registration.waiting_for_group)
        return
    
    fio_parts = message.text.strip().split()
    
    if len(fio_parts) < 2:
        back_keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏ –º–∏–Ω–∏–º—É–º –§–∞–º–∏–ª–∏—é –∏ –ò–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω",
            reply_markup=back_keyboard
        )
        return
    
    last_name = fio_parts[0]
    first_name = fio_parts[1]
    middle_name = fio_parts[2] if len(fio_parts) > 2 else None
    
    data = await state.get_data()
    group = data['group']
    
    telegram_id = message.from_user.id
    telegram_username = message.from_user.username
    telegram_name = message.from_user.full_name
    
    photo_url = await get_user_photo_url(telegram_id)
    has_premium = message.from_user.is_premium or False
    
    try:
        user_id = database.create_user(
            telegram_id=telegram_id,
            telegram_username=telegram_username,
            telegram_name=telegram_name,
            photo_url=photo_url,
            has_premium=has_premium,
            group_name=group,
            last_name=last_name,
            first_name=first_name,
            middle_name=middle_name
        )
        
        full_name = f"{last_name} {first_name}"
        if middle_name:
            full_name += f" {middle_name}"
        
        await message.answer(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üë§ {full_name}\n"
            f"üéì –ì—Ä—É–ø–ø–∞: {group}\n\n"
            f"–î–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ:\n"
            f"üëâ https://pashq.ru/login\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.",
            reply_markup=get_profile_keyboard()
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
        )
    
    await state.clear()

@dp.message(AdminRegistration.waiting_for_role_choice)
async def process_role_choice(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ (—É—á–∏—Ç–µ–ª—å/—É—á–µ–Ω–∏–∫-–∞–¥–º–∏–Ω)"""
    if message.text == "‚óÄÔ∏è –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
        return
    
    if message.text == "üë®‚Äçüè´ –£—á–∏—Ç–µ–ª—å":
        await state.update_data(role="teacher", is_admin=False, group_name=None)
        back_keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
        await message.answer(
            "üë®‚Äçüè´ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–∏—Ç–µ–ª—è\n\n"
            "–í–≤–µ–¥–∏ —Å–≤–æ—ë –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ) —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n\n"
            "–ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç—á–µ—Å—Ç–≤–∞, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è.",
            reply_markup=back_keyboard
        )
        await state.set_state(AdminRegistration.waiting_for_fio)
    
    elif message.text == "üë§ –£—á–µ–Ω–∏–∫-–∞–¥–º–∏–Ω":
        await state.update_data(role="student", is_admin=True)
        await message.answer(
            "üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–µ–Ω–∏–∫–∞-–∞–¥–º–∏–Ω–∞\n\n"
            "–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
            reply_markup=get_groups_keyboard()
        )
        await state.set_state(AdminRegistration.waiting_for_group)
    
    else:
        await message.answer(
            "‚ùå –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=get_role_choice_keyboard()
        )

@dp.message(AdminRegistration.waiting_for_group)
async def process_admin_group(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è —É—á–µ–Ω–∏–∫–∞-–∞–¥–º–∏–Ω–∞"""
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await message.answer(
            "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞:",
            reply_markup=get_role_choice_keyboard()
        )
        await state.set_state(AdminRegistration.waiting_for_role_choice)
        return
    
    if message.text not in GROUPS:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:",
            reply_markup=get_groups_keyboard()
        )
        return
    
    await state.update_data(group_name=message.text)
    back_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )
    await message.answer(
        "‚úÖ –ì—Ä—É–ø–ø–∞ –≤—ã–±—Ä–∞–Ω–∞!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ—ë –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ) —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n\n"
        "–ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç—á–µ—Å—Ç–≤–∞, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è.",
        reply_markup=back_keyboard
    )
    await state.set_state(AdminRegistration.waiting_for_fio)

@dp.message(AdminRegistration.waiting_for_fio)
async def process_admin_fio(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –§–ò–û –¥–ª—è –∞–¥–º–∏–Ω–∞/—É—á–∏—Ç–µ–ª—è"""
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        data = await state.get_data()
        role = data.get('role')
        
        if role == "teacher":
            await message.answer(
                "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞:",
                reply_markup=get_role_choice_keyboard()
            )
            await state.set_state(AdminRegistration.waiting_for_role_choice)
        else:  # student admin
            await message.answer(
                "–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
                reply_markup=get_groups_keyboard()
            )
            await state.set_state(AdminRegistration.waiting_for_group)
        return
    
    fio_parts = message.text.strip().split()
    
    if len(fio_parts) < 2:
        back_keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏ –º–∏–Ω–∏–º—É–º –§–∞–º–∏–ª–∏—é –∏ –ò–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω",
            reply_markup=back_keyboard
        )
        return
    
    last_name = fio_parts[0]
    first_name = fio_parts[1]
    middle_name = fio_parts[2] if len(fio_parts) > 2 else None
    
    data = await state.get_data()
    role = data.get('role')
    is_admin = data.get('is_admin')
    group_name = data.get('group_name')
    
    telegram_id = message.from_user.id
    telegram_username = message.from_user.username
    telegram_name = message.from_user.full_name
    photo_url = await get_user_photo_url(telegram_id)
    has_premium = message.from_user.is_premium or False
    
    # –°–æ–∑–¥–∞–µ–º –æ–∂–∏–¥–∞—é—â—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    confirmation_code = database.create_pending_registration(
        telegram_id=telegram_id,
        last_name=last_name,
        first_name=first_name,
        middle_name=middle_name,
        role=role,
        is_admin=is_admin,
        group_name=group_name,
        telegram_username=telegram_username,
        telegram_name=telegram_name,
        photo_url=photo_url,
        has_premium=has_premium
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É
    role_text = "üë®‚Äçüè´ –£—á–∏—Ç–µ–ª—å" if role == "teacher" else "üë§ –£—á–µ–Ω–∏–∫-–∞–¥–º–∏–Ω"
    group_text = f"\nüë• –ì—Ä—É–ø–ø–∞: {group_name}" if group_name else ""
    
    try:
        await bot.send_message(
            SUPER_ADMIN_ID,
            f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n"
            f"–¢–∏–ø: {role_text}\n"
            f"üë§ –§–ò–û: {last_name} {first_name} {middle_name or ''}{group_text}\n"
            f"üÜî Telegram ID: {telegram_id}\n"
            f"üì± Username: @{telegram_username or '–Ω–µ—Ç'}\n\n"
            f"üîë –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: `{confirmation_code}`\n\n"
            f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å —ç—Ç–æ—Ç –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
        )
        
        await message.answer(
            f"‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n"
            f"–ü–æ–ø—Ä–æ—Å–∏ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –∏ –≤–≤–µ–¥–∏ –µ–≥–æ –∑–¥–µ—Å—å.\n\n"
            f"–ö–æ–¥ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 6 —Ü–∏—Ñ—Ä.",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(AdminRegistration.waiting_for_confirmation)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()

@dp.message(AdminRegistration.waiting_for_confirmation)
async def process_confirmation_code(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
    confirmation_code = message.text.strip()
    telegram_id = message.from_user.id
    
    if len(confirmation_code) != 6 or not confirmation_code.isdigit():
        await message.answer(
            "‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    success = database.confirm_pending_registration(telegram_id, confirmation_code)
    
    if success:
        user = database.get_user_by_telegram(telegram_id)
        
        if user['role'] == "teacher":
            await message.answer(
                f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                f"–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —É—á–∏—Ç–µ–ª—å.\n\n"
                f"üåê –í–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç:\n"
                f"https://pashq.ru/rub\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è.",
                reply_markup=get_profile_keyboard()
            )
        else:  # student admin
            await message.answer(
                f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                f"–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —É—á–µ–Ω–∏–∫-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.\n\n"
                f"üåê –í–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç:\n"
                f"https://pashq.ru/login\n\n"
                f"(–≤—Ö–æ–¥ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤)\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è.",
                reply_markup=get_profile_keyboard()
            )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
        try:
            role_text = "—É—á–∏—Ç–µ–ª—è" if user['role'] == "teacher" else "—É—á–µ–Ω–∏–∫–∞-–∞–¥–º–∏–Ω–∞"
            await bot.send_message(
                SUPER_ADMIN_ID,
                f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                f"–¢–∏–ø: {role_text}\n"
                f"üë§ {user['last_name']} {user['first_name']} {user.get('middle_name') or ''}\n"
                f"üÜî ID: {telegram_id}"
            )
        except:
            pass
        
        await state.clear()
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

@dp.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message):
    telegram_id = message.from_user.id
    user = database.get_user_by_telegram(telegram_id)
    
    if not user:
        await message.answer(
            "‚ùå –¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=ReplyKeyboardRemove()
        )
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø—Ä–æ—Ñ–∏–ª—è
    photo_url = await get_user_photo_url(telegram_id)
    has_premium = message.from_user.is_premium or False
    
    if photo_url:
        database.update_user_profile(
            telegram_id=telegram_id,
            telegram_username=message.from_user.username,
            telegram_name=message.from_user.full_name,
            photo_url=photo_url,
            has_premium=has_premium
        )
        user = database.get_user_by_telegram(telegram_id)  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    
    profile_text = f"üë§ *–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
    profile_text += f"üÜî ID: `{user['telegram_id']}`\n"
    
    if user.get('telegram_username'):
        profile_text += f"üì± Username: @{user['telegram_username']}\n"
    
    if user.get('telegram_name'):
        profile_text += f"‚úèÔ∏è –ò–º—è –≤ Telegram: {user['telegram_name']}\n"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    if user.get('role') == 'teacher':
        profile_text += f"\nüë®‚Äçüè´ *–î–∞–Ω–Ω—ã–µ —É—á–∏—Ç–µ–ª—è:*\n"
    elif user.get('is_admin'):
        profile_text += f"\nüëë *–î–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n"
    else:
        profile_text += f"\nüë®‚Äçüéì *–î–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞:*\n"
    
    profile_text += f"üìù –§–∞–º–∏–ª–∏—è: {user['last_name']}\n"
    profile_text += f"üìù –ò–º—è: {user['first_name']}\n"
    
    if user.get('middle_name'):
        profile_text += f"üìù –û—Ç—á–µ—Å—Ç–≤–æ: {user['middle_name']}\n"
    
    if user.get('group_name'):
        profile_text += f"üéì –ì—Ä—É–ø–ø–∞: *{user['group_name']}*\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ —É—á–∏—Ç–µ–ª–µ–π
    if user.get('is_admin'):
        profile_text += f"üíº –°—Ç–∞—Ç—É—Å: *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä*\n"
    elif user.get('role') == 'teacher':
        profile_text += f"üíº –°—Ç–∞—Ç—É—Å: *–£—á–∏—Ç–µ–ª—å*\n"
    
    if user.get('has_premium'):
        profile_text += f"\n‚≠ê Telegram Premium\n"
    
    # –†–∞–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    profile_text += f"\nüåê –í–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç:\n"
    if user.get('role') == 'teacher':
        profile_text += f"https://pashq.ru/rub"
    else:
        profile_text += f"https://pashq.ru/login"
    
    if user.get('photo_url'):
        try:
            from aiogram.types import URLInputFile
            photo = URLInputFile(user['photo_url'])
            await message.answer_photo(
                photo=photo,
                caption=profile_text,
                parse_mode="Markdown",
                reply_markup=get_profile_keyboard()
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await message.answer(
                profile_text,
                parse_mode="Markdown",
                reply_markup=get_profile_keyboard()
            )
    else:
        await message.answer(
            profile_text,
            parse_mode="Markdown",
            reply_markup=get_profile_keyboard()
        )

def send_login_code_sync(telegram_id: int, code: str):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞"""
    try:
        import requests
        from config import BOT_TOKEN
        
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        data = {
            "chat_id": telegram_id,
            "text": f"üîê –ö–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç:\n\n*{code}*\n\n–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç.\n–£ —Ç–µ–±—è –µ—Å—Ç—å 3 –ø–æ–ø—ã—Ç–∫–∏ –≤–≤–æ–¥–∞.",
            "parse_mode": "Markdown"
        }
        
        response = requests.post(url, json=data, timeout=5)
        return response.status_code == 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {e}")
        return False

async def send_login_code(telegram_id: int, code: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞"""
    return send_login_code_sync(telegram_id, code)

async def main():
    database.init_db()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())

